////////////////////////////////////////////////////////////////
/////////////////       Proficiencies       ////////////////////
////////////////////////////////////////////////////////////////








/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////                                   /////////////////////////////////
/////////////////////////////////    Change Weapon Proficiencies    /////////////////////////////////
/////////////////////////////////                                   /////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
//TO DO: CHECK WITH OTHER MODS THAT ALTER ITEM PROF/TYPES (Tweaks, fnp, others?  Check subtledoctor's mods)

//TO DO: REPLACE TEXTUALLY RE: PROFICIENCIES

//TO DO: Add Usability to All classes (based on proficiencies...)

//TO DO: GIve bonuses/penalties w/ weapons (and armor) based on proficiency (e.g. bleeding, etc.)



//Change prof by itemtype (etc.)
COPY_EXISTING_REGEXP GLOB ~.*\.itm~ ~override~ //All items
 PATCH_IF (~%SOURCE_SIZE%~ > ~0x71~) BEGIN
 READ_SHORT 0x1c ~itemtype~                    //check for itemtype
 READ_BYTE  0x31 ~prof~                        //check for proficiency
 READ_LONG 0x8 ~res_un~                        //unidentified res
//Bastard swords to Greatswords (gotta do this first...)
   PATCH_IF (~prof~ = 89)  BEGIN                            //prof in Bastard Swords
               WRITE_BYTE  0x31 93                           //Change prof to 2 hand sword
   END
//Simple weapons (Daggers, clubs, slings, staves)
PATCH_IF    (~itemtype~ = 16)  OR                            //daggers and throwing daggers
            (~itemtype~ = 18)  OR                            //Slings
            (~prof~ = 102)  OR                               //prof in staff
            (~prof~ = 115)  BEGIN                            //prof in clubs
               WRITE_BYTE  0x31 89                           //Change prof to bastard sword
 SPRINT old1 @700101//old text (wp:daggers)
 SPRINT old2 @700102//old text (wp:sling)
 SPRINT old3 @700103//old text (wp:staff)
 SPRINT old4 @700104//old text (wp:club)
 SPRINT new @700100//new text (wp:simple)
  READ_LONG 0x50 "valid"
  PATCH_IF (%valid% >= 0) BEGIN // verify desc is valid
  READ_STRREF 0x50 ~desc~
	INNER_PATCH_SAVE new_desc ~%desc%~ BEGIN
	REPLACE_TEXTUALLY ~%old1%~ ~%new%~
	REPLACE_TEXTUALLY ~%old2%~ ~%new%~
	REPLACE_TEXTUALLY ~%old3%~ ~%new%~
	REPLACE_TEXTUALLY ~%old4%~ ~%new%~
	END
  SAY_EVALUATED 0x50 ~%new_desc%~
  END  //
  READ_LONG 0x54 "valid_id"
  PATCH_IF (%valid_id% >= 0) BEGIN // verify identified desc is valid
  READ_STRREF 0x54 ~desc_id~
	INNER_PATCH_SAVE new_desc_id ~%desc_id%~ BEGIN
	REPLACE_TEXTUALLY ~%old1%~ ~%new%~
	REPLACE_TEXTUALLY ~%old2%~ ~%new%~
	REPLACE_TEXTUALLY ~%old3%~ ~%new%~
	REPLACE_TEXTUALLY ~%old4%~ ~%new%~
	END
  SAY_EVALUATED 0x54 ~%new_desc_id%~
  END  //
END
//Medium Blades (long swords, short swords, Wakizashi, Ninja-to, Scimitar, Katana)
   PATCH_IF  (~prof~ = 90)  OR                               //Long swords (for text change)
             (~prof~ = 94)  OR                               //Prof katana, longswords are longswords... (we need them, though...)
             (~itemtype~ = 19) OR                            //Small sword (and many 'exotic' swords, which is okay)
             (~prof~ = 95)  BEGIN                            // 'exotic' prof: Prof schimitar/wak/ninja-to
               WRITE_BYTE  0x31 90                           //Change prof to long sword
 SPRINT old1 @700201//old text (wp:long swords)
 SPRINT old2 @700202//old text (wp:scim/wak/ninjato)
 SPRINT old3 @700203//old text (wp:katana)
 SPRINT old4 @700204//old text (wp:s swd)
 SPRINT new @700200//new text (wp:blade)
  READ_LONG 0x50 "valid"
  PATCH_IF (%valid% >= 0) BEGIN // verify desc is valid
  READ_STRREF 0x50 ~desc~
	INNER_PATCH_SAVE new_desc ~%desc%~ BEGIN
	REPLACE_TEXTUALLY ~%old1%~ ~%new%~
	REPLACE_TEXTUALLY ~%old2%~ ~%new%~
	REPLACE_TEXTUALLY ~%old3%~ ~%new%~
	REPLACE_TEXTUALLY ~%old4%~ ~%new%~
	END
  SAY_EVALUATED 0x50 ~%new_desc%~
  END  //
  READ_LONG 0x54 "valid_id"
  PATCH_IF (%valid_id% >= 0) BEGIN // verify identified desc is valid
  READ_STRREF 0x54 ~desc_id~
	INNER_PATCH_SAVE new_desc_id ~%desc_id%~ BEGIN
	REPLACE_TEXTUALLY ~%old1%~ ~%new%~
	REPLACE_TEXTUALLY ~%old2%~ ~%new%~
	REPLACE_TEXTUALLY ~%old3%~ ~%new%~
	REPLACE_TEXTUALLY ~%old4%~ ~%new%~
	END
  SAY_EVALUATED 0x54 ~%new_desc_id%~
  END  //
   END
//Martial Arts (91)   //Need to target other items...(and maybe exclude some of these...)
   PATCH_IF  (~itemtype~ = 28) BEGIN                         //Hand to hand items...
               WRITE_BYTE  0x31 91                           //Change prof to 2handed prof
   END
//Axe (same) (92)    Shouldn't need to make any changes here... (not even descriptions)
//Great Swords (same) Excepting changes above, shouldn't need to make changes...(93)
PATCH_IF (~prof~ = 93)  BEGIN                            //prof in 2 hand sword (inc. b. swrods set above)
 SPRINT old1 @700501//old text (wp:2 h swd)
 SPRINT old2 @700502//old text (wp:b swd)
 SPRINT new @700500//new text (wp:great sword)
  READ_LONG 0x50 "valid"
  PATCH_IF (%valid% >= 0) BEGIN // verify desc is valid
  READ_STRREF 0x50 ~desc~
	INNER_PATCH_SAVE new_desc ~%desc%~ BEGIN
	REPLACE_TEXTUALLY ~%old1%~ ~%new%~
	REPLACE_TEXTUALLY ~%old2%~ ~%new%~
	END
  SAY_EVALUATED 0x50 ~%new_desc%~
  END  //
  READ_LONG 0x54 "valid_id"
  PATCH_IF (%valid_id% >= 0) BEGIN // verify identified desc is valid
  READ_STRREF 0x54 ~desc_id~
	INNER_PATCH_SAVE new_desc_id ~%desc_id%~ BEGIN
	REPLACE_TEXTUALLY ~%old1%~ ~%new%~
	REPLACE_TEXTUALLY ~%old2%~ ~%new%~
	END
  SAY_EVALUATED 0x54 ~%new_desc_id%~
  END  //
END
//Polearm and spears
   PATCH_IF  (~itemtype~ = 30) OR                            //halberd items...
             (~itemtype~ = 29) BEGIN                         //spear items...
               WRITE_BYTE  0x31 94                           //Change prof to katana
 SPRINT old1 @700601//old text (wp:halberd)
 SPRINT old2 @700602//old text (wp:spear)
 SPRINT new @700600//new text (wp:polearm)
  READ_LONG 0x50 "valid"
  PATCH_IF (%valid% >= 0) BEGIN // verify desc is valid
  READ_STRREF 0x50 ~desc~
	INNER_PATCH_SAVE new_desc ~%desc%~ BEGIN
	REPLACE_TEXTUALLY ~%old1%~ ~%new%~
	REPLACE_TEXTUALLY ~%old2%~ ~%new%~
	END
  SAY_EVALUATED 0x50 ~%new_desc%~
  END  //
  READ_LONG 0x54 "valid_id"
  PATCH_IF (%valid_id% >= 0) BEGIN // verify identified desc is valid
  READ_STRREF 0x54 ~desc_id~
	INNER_PATCH_SAVE new_desc_id ~%desc_id%~ BEGIN
	REPLACE_TEXTUALLY ~%old1%~ ~%new%~
	REPLACE_TEXTUALLY ~%old2%~ ~%new%~
	END
  SAY_EVALUATED 0x54 ~%new_desc_id%~
  END  //
   END
//Mace, Hammer, Morning Star, Flail (95)
   PATCH_IF  (~itemtype~ = 21) OR                            //warhammer items...
             (~itemtype~ = 22) OR                           //m. star items... (at least one hth, and old sword ?)
             (~itemtype~ = 23) OR                           //flail items...
             (~prof~ = 101)   BEGIN                          //mace prof (hopefully only mace)
               WRITE_BYTE  0x31 95                           //Change prof to scim, etc.
 SPRINT old1 @700701//old text (wp:mace)
 SPRINT old2 @700702//old text (wp:hammer)
 SPRINT old3 @700703//old text (wp:mstar/flail)
 SPRINT new @700700//new text (wp:blunt)
  READ_LONG 0x50 "valid"
  PATCH_IF (%valid% >= 0) BEGIN // verify desc is valid
  READ_STRREF 0x50 ~desc~
	INNER_PATCH_SAVE new_desc ~%desc%~ BEGIN
	REPLACE_TEXTUALLY ~%old1%~ ~%new%~
	REPLACE_TEXTUALLY ~%old2%~ ~%new%~
	REPLACE_TEXTUALLY ~%old3%~ ~%new%~
	END
  SAY_EVALUATED 0x50 ~%new_desc%~
  END  //
  READ_LONG 0x54 "valid_id"
  PATCH_IF (%valid_id% >= 0) BEGIN // verify identified desc is valid
  READ_STRREF 0x54 ~desc_id~
	INNER_PATCH_SAVE new_desc_id ~%desc_id%~ BEGIN
	REPLACE_TEXTUALLY ~%old1%~ ~%new%~
	REPLACE_TEXTUALLY ~%old2%~ ~%new%~
	REPLACE_TEXTUALLY ~%old3%~ ~%new%~
	END
  SAY_EVALUATED 0x54 ~%new_desc_id%~
  END  //
   END
//Bows crossbows(96)
PATCH_IF  (~itemtype~ = 15) OR                                  //bow item
          (~itemtype~ = 27) BEGIN                              //X-bow
               WRITE_BYTE  0x31 96                           //Change prof to dagger (heh, really)
 SPRINT old1 @700801//old text (wp:lbow)
 SPRINT old2 @700802//old text (wp:s.bow)
 SPRINT old2 @700803//old text (wp:x.bow)
 SPRINT new @700800//new text (wp:blunt)
  READ_LONG 0x50 "valid"
  PATCH_IF (%valid% >= 0) BEGIN // verify desc is valid
  READ_STRREF 0x50 ~desc~
	INNER_PATCH_SAVE new_desc ~%desc%~ BEGIN
	REPLACE_TEXTUALLY ~%old1%~ ~%new%~
	REPLACE_TEXTUALLY ~%old2%~ ~%new%~
	END
  SAY_EVALUATED 0x50 ~%new_desc%~
  END  //
  READ_LONG 0x54 "valid_id"
  PATCH_IF (%valid_id% >= 0) BEGIN // verify identified desc is valid
  READ_STRREF 0x54 ~desc_id~
	INNER_PATCH_SAVE new_desc_id ~%desc_id%~ BEGIN
	REPLACE_TEXTUALLY ~%old1%~ ~%new%~
	REPLACE_TEXTUALLY ~%old2%~ ~%new%~
	END
  SAY_EVALUATED 0x54 ~%new_desc_id%~
  END  //
END
//Armors(97)   (should Add proficiency to description, And change using unique types...)
//What about helmets?  What about robes?
 PATCH_IF GAME_IS ~bgee~ BEGIN  //BGEE SPecific armor text
//'light' armors...bgee
  PATCH_IF (~res_un~ = 29066) OR      // leather
           (~res_un~ = 30189) OR      // leather
           (~res_un~ = 2891) OR      // leather
           (~res_un~ = 2890) OR      // leather
           (~res_un~ = 6666) OR      //Studded leather
           (~res_un~ = 6664) BEGIN   //Studded leather text in bgee
               WRITE_BYTE  0x31 97                           //Change prof to warhammer
               WRITE_SHORT 0x1c 60                           //Change type 'leather' (0x3c) (now 'light')
 SPRINT old @700900//old text (just 'requires')
 SPRINT new @700901//new text (added light prof)
  READ_STRREF 0x50 ~desc~
  READ_STRREF 0x54 ~desc_id~
	INNER_PATCH_SAVE new_desc ~%desc%~ BEGIN
	REPLACE_TEXTUALLY ~%old%~ ~%new%~
	END
  SAY_EVALUATED 0x50 ~%new_desc%~
	INNER_PATCH_SAVE new_desc_id ~%desc_id%~ BEGIN
	REPLACE_TEXTUALLY ~%old%~ ~%new%~
	END
  SAY_EVALUATED 0x54 ~%new_desc_id%~
  END
//'medium' armors...bgee
  PATCH_IF (~res_un~ = 22714) OR      // Hide
           (~res_un~ = 6672) OR      // Chain
           (~res_un~ = 25550) OR      // Chain
           (~res_un~ = 25551) OR      // Elven Chain
           (~res_un~ = 6677) OR      // Splint
           (~res_un~ = 6678) OR      // Splint
           (~res_un~ = 214) BEGIN     // Chain
               WRITE_BYTE  0x31 97                           //Change prof to warhammer
               WRITE_SHORT 0x1c 62                           //Change type 'chain' (0x3e) (now 'medium')
 SPRINT old @700900//old text (just 'requires')
 SPRINT new @700902//new text (added med prof)
  READ_STRREF 0x50 ~desc~
  READ_STRREF 0x54 ~desc_id~
	INNER_PATCH_SAVE new_desc ~%desc%~ BEGIN
	REPLACE_TEXTUALLY ~%old%~ ~%new%~
	END
  SAY_EVALUATED 0x50 ~%new_desc%~
	INNER_PATCH_SAVE new_desc_id ~%desc_id%~ BEGIN
	REPLACE_TEXTUALLY ~%old%~ ~%new%~
	END
  SAY_EVALUATED 0x54 ~%new_desc_id%~
  END
//'heavy' armors...bgee
  PATCH_IF (~res_un~ = 267) OR      // plate
           (~res_un~ = 6669) OR     // plate
           (~res_un~ = 29069) OR     // plate
           (~res_un~ = 6686) OR     //Ankheg plate
           (~res_un~ = 6687) OR     //Ankheg plate
           (~res_un~ = 6675) OR     // full plate
           (~res_un~ = 6642) BEGIN     // full plate
               WRITE_BYTE  0x31 97                           //Change prof to warhammer
               WRITE_SHORT 0x1c 65                           //Change type 'full plate) (0x41) (now 'heavy')
 SPRINT old @700900//old text (just 'requires')
 SPRINT new @700903//new text (added heavy prof)
  READ_STRREF 0x50 ~desc~
  READ_STRREF 0x54 ~desc_id~
	INNER_PATCH_SAVE new_desc ~%desc%~ BEGIN
	REPLACE_TEXTUALLY ~%old%~ ~%new%~
	END
  SAY_EVALUATED 0x50 ~%new_desc%~
	INNER_PATCH_SAVE new_desc_id ~%desc_id%~ BEGIN
	REPLACE_TEXTUALLY ~%old%~ ~%new%~
	END
  SAY_EVALUATED 0x54 ~%new_desc_id%~
  END
 END //END BGEE TEXT

END //END all
BUT_ONLY//But only if it changes
//Make weapons/armor usable by everybody

//Add to splprot  (thanks to subtledoctor for virtually all of this)
APPEND ~splprot.2da~ ~B_ARMOR_EQ%TAB%97%TAB%-1%TAB%1~  //Armors (equals)
APPEND ~splprot.2da~ ~B_ARMOR_LS%TAB%97%TAB%-1%TAB%2~  //Armors (less than)

COPY_EXISTING ~splprot.2da~ ~override~
   COUNT_2DA_COLS cols // amount of columns
   READ_2DA_ENTRIES_NOW rows cols // read all file into memory  
   FOR (row = 1; row < rows; ++row) BEGIN // iterate over rows
      READ_2DA_ENTRY_FORMER rows row 0 ~stat~ // read column value
      PATCH_IF ~%stat%~ STRING_EQUAL_CASE ~B_ARMOR_EQ~ BEGIN
         SET arm_eq = %row%
      END
      PATCH_IF ~%stat%~ STRING_EQUAL_CASE ~B_ARMOR_LS~ BEGIN
         SET arm_ls = %row%
      END
   END
BUT_ONLY

//Make proficiency meaningful

//Light Armor (0 prof)
COPY ~proficiency/data/proficiency/armor/B_LIT0A.SPL~ ~override~   //Applies spl that penalizes for non-proficiency (0 rank)
 LPF ALTER_EFFECT INT_VAR match_opcode = 326 parameter1 = 0 parameter2 = %arm_eq% END  //0 ranks 
COPY ~proficiency/data/proficiency/armor/B_LIT0B.SPL~ ~override~   //Spl that penalizes for non-proficiency 
COPY ~proficiency/data/proficiency/armor/B_LIT0.EFF~ ~override~   //Eff that applies spl that penalizes for non-proficiency (0 rank)
//Light Armor (1 prof)
COPY ~proficiency/data/proficiency/armor/B_LIT1A.SPL~ ~override~   //Applies spl that penalizes for non-proficiency (1 rank)
 LPF ALTER_EFFECT INT_VAR match_opcode = 326 parameter1 = 1 parameter2 = %arm_eq% END  //1 ranks 
COPY ~proficiency/data/proficiency/armor/B_LIT1B.SPL~ ~override~   //Spl that penalizes for non-proficiency 
COPY ~proficiency/data/proficiency/armor/B_LIT1.EFF~ ~override~   //Eff that applies spl that penalizes for non-proficiency (1 rank)
//Light Armor (2 prof)
COPY ~proficiency/data/proficiency/armor/B_LIT2A.SPL~ ~override~   //Applies spl that penalizes for proficiency (2 rank)
 LPF ALTER_EFFECT INT_VAR match_opcode = 326 parameter1 = 2 parameter2 = %arm_eq% END
COPY ~proficiency/data/proficiency/armor/B_LIT2B.SPL~ ~override~   //Spl that penalizes for proficiency (2 rank)
COPY ~proficiency/data/proficiency/armor/B_LIT2.EFF~ ~override~   //Eff that applies spl that penalizes for proficiency (2 rank)
//Light Armor (3 prof)
<<<<<<< HEAD
/*   Not really needed.  3 ranks elimiates all penalties
=======
>>>>>>> 6092bde644dafe18befcb01c9edd932806abb950
COPY ~proficiency/data/proficiency/armor/B_LIT3A.SPL~ ~override~   //Applies spl that penalizes for proficiency (3 rank)
 LPF ALTER_EFFECT INT_VAR match_opcode = 326 parameter1 = 3 parameter2 = %arm_eq% END
COPY ~proficiency/data/proficiency/armor/B_LIT3B.SPL~ ~override~   //Spl that penalizes for non-proficiency (3 rank)
COPY ~proficiency/data/proficiency/armor/B_LIT3.EFF~ ~override~   //Eff that applies spl that penalizes for non-proficiency (3 rank)
<<<<<<< HEAD
*/
=======
>>>>>>> 6092bde644dafe18befcb01c9edd932806abb950
//Light Armor (4 prof)
COPY ~proficiency/data/proficiency/armor/B_LIT4A.SPL~ ~override~   //Applies spl that penalizes for proficiency (4 rank)
 LPF ALTER_EFFECT INT_VAR match_opcode = 326 parameter1 = 4 parameter2 = %arm_eq% END
COPY ~proficiency/data/proficiency/armor/B_LIT4B.SPL~ ~override~   //Spl that penalizes for non-proficiency (4 rank)
COPY ~proficiency/data/proficiency/armor/B_LIT4.EFF~ ~override~   //Eff that applies spl that penalizes for proficiency (4 rank)
//Light Armor (5 prof)
COPY ~proficiency/data/proficiency/armor/B_LIT5A.SPL~ ~override~   //Applies spl that penalizes for proficiency (5 rank)
 LPF ALTER_EFFECT INT_VAR match_opcode = 326 parameter1 = 5 parameter2 = %arm_eq% END
COPY ~proficiency/data/proficiency/armor/B_LIT5B.SPL~ ~override~   //Spl that penalizes for proficiency (5 rank)
COPY ~proficiency/data/proficiency/armor/B_LIT5.EFF~ ~override~   //Eff that applies spl that penalizes for proficiency (5 rank)

//Medium Armor (0-1 prof)
COPY ~proficiency/data/proficiency/armor/B_MED0A.SPL~ ~override~   //Applies spl that penalizes for non-proficiency (0 rank)
 LPF ALTER_EFFECT INT_VAR match_opcode = 326 parameter1 = 2 parameter2 = %arm_ls% END  //for any value less than 2
COPY ~proficiency/data/proficiency/armor/B_MED0B.SPL~ ~override~   //Spl that penalizes for non-proficiency (0-1 rank)
COPY ~proficiency/data/proficiency/armor/B_MED0.EFF~ ~override~   //Eff that applies spl that penalizes for non-proficiency (0-1 rank)
//Medium Armor (2 prof)
COPY ~proficiency/data/proficiency/armor/B_MED2A.SPL~ ~override~   //Applies spl that penalizes for proficiency (2 rank)
 LPF ALTER_EFFECT INT_VAR match_opcode = 326 parameter1 = 2 parameter2 = %arm_eq% END
COPY ~proficiency/data/proficiency/armor/B_MED2B.SPL~ ~override~   //Spl that penalizes for proficiency (2 rank)
COPY ~proficiency/data/proficiency/armor/B_MED2.EFF~ ~override~   //Eff that applies spl that penalizes for proficiency (2 rank)
//Medium Armor (3 prof)
COPY ~proficiency/data/proficiency/armor/B_MED3A.SPL~ ~override~   //Applies spl that penalizes for proficiency (3 rank)
 LPF ALTER_EFFECT INT_VAR match_opcode = 326 parameter1 = 3 parameter2 = %arm_eq% END
COPY ~proficiency/data/proficiency/armor/B_MED3B.SPL~ ~override~   //Spl that penalizes for non-proficiency (3 rank)
COPY ~proficiency/data/proficiency/armor/B_MED3.EFF~ ~override~   //Eff that applies spl that penalizes for non-proficiency (3 rank)
//Med Armor (4 prof)
COPY ~proficiency/data/proficiency/armor/B_MED4A.SPL~ ~override~   //Applies spl that penalizes for proficiency (4 rank)
 LPF ALTER_EFFECT INT_VAR match_opcode = 326 parameter1 = 4 parameter2 = %arm_eq% END
COPY ~proficiency/data/proficiency/armor/B_MED4B.SPL~ ~override~   //Spl that penalizes for non-proficiency (4 rank)
COPY ~proficiency/data/proficiency/armor/B_MED4.EFF~ ~override~   //Eff that applies spl that penalizes for proficiency (4 rank)
//Med Armor (5 prof)
COPY ~proficiency/data/proficiency/armor/B_MED5A.SPL~ ~override~   //Applies spl that penalizes for proficiency (5 rank)
 LPF ALTER_EFFECT INT_VAR match_opcode = 326 parameter1 = 5 parameter2 = %arm_eq% END
COPY ~proficiency/data/proficiency/armor/B_MED5B.SPL~ ~override~   //Spl that penalizes for proficiency (5 rank)
COPY ~proficiency/data/proficiency/armor/B_MED5.EFF~ ~override~   //Eff that applies spl that penalizes for proficiency (5 rank)

//Heavy Armor (0-1 prof)
COPY ~proficiency/data/proficiency/armor/B_HVY0A.SPL~ ~override~   //Applies spl that penalizes for non-proficiency (0 rank)
 LPF ALTER_EFFECT INT_VAR match_opcode = 326 parameter1 = 2 parameter2 = %arm_ls% END  //for any value less than 2
COPY ~proficiency/data/proficiency/armor/B_HVY0B.SPL~ ~override~   //Spl that penalizes for non-proficiency (0-1 rank)
COPY ~proficiency/data/proficiency/armor/B_HVY0.EFF~ ~override~   //Eff that applies spl that penalizes for non-proficiency (0-1 rank)
//Heavy Armor (2 prof)
COPY ~proficiency/data/proficiency/armor/B_HVY2A.SPL~ ~override~   //Applies spl that penalties
 LPF ALTER_EFFECT INT_VAR match_opcode = 326 parameter1 = 2 parameter2 = %arm_eq% END
COPY ~proficiency/data/proficiency/armor/B_HVY2B.SPL~ ~override~   //Spl that applies penalties
COPY ~proficiency/data/proficiency/armor/B_HVY2.EFF~ ~override~   //Eff that applies spl that penalizes
//Heavy Armor (3 prof)
COPY ~proficiency/data/proficiency/armor/B_HVY3A.SPL~ ~override~   //Applies spl that penalizes for proficiency (3 rank)
 LPF ALTER_EFFECT INT_VAR match_opcode = 326 parameter1 = 3 parameter2 = %arm_eq% END
COPY ~proficiency/data/proficiency/armor/B_HVY3B.SPL~ ~override~   //Spl that penalizes for proficiency (3 rank)
COPY ~proficiency/data/proficiency/armor/B_HVY3.EFF~ ~override~   //Eff that applies spl that penalizes for proficiency (3 rank)
//Heavy Armor (4 prof)
COPY ~proficiency/data/proficiency/armor/B_HVY4A.SPL~ ~override~   //Applies spl that penalizes for proficiency (4 rank)
 LPF ALTER_EFFECT INT_VAR match_opcode = 326 parameter1 = 4 parameter2 = %arm_eq% END
COPY ~proficiency/data/proficiency/armor/B_HVY4B.SPL~ ~override~   //Spl that penalizes for non-proficiency (4 rank)
COPY ~proficiency/data/proficiency/armor/B_HVY4.EFF~ ~override~   //Eff that applies spl that penalizes for proficiency (4 rank)
//Heavy Armor (5 prof)
COPY ~proficiency/data/proficiency/armor/B_HVY5A.SPL~ ~override~   //Applies spl that penalizes for proficiency (5 rank)
 LPF ALTER_EFFECT INT_VAR match_opcode = 326 parameter1 = 5 parameter2 = %arm_eq% END
COPY ~proficiency/data/proficiency/armor/B_HVY5B.SPL~ ~override~   //Spl that penalizes for proficiency (5 rank)
COPY ~proficiency/data/proficiency/armor/B_HVY5.EFF~ ~override~   //Eff that applies spl that penalizes for proficiency (5 rank)

//Apply to armors
COPY_EXISTING_REGEXP GLOB ~.*\.itm~ ~override~ //All items
 PATCH_IF (~%SOURCE_SIZE%~ > ~0x71~) BEGIN
 READ_SHORT 0x1c ~itemtype~                    //check for itemtype
     PATCH_IF  (~itemtype~ = 60) BEGIN        //'light' armor types
       LPF cd_apply_batch STR_VAR array_name = b_light_armor_arrays END // light armor prof batch
       LPF ALTER_EFFECT INT_VAR match_opcode = 326 parameter1 = 0 parameter2 = %arm_eq% STR_VAR match_resource = ~B_LIT0B~ END //value = 0
       LPF ALTER_EFFECT INT_VAR match_opcode = 326 parameter1 = 1 parameter2 = %arm_eq% STR_VAR match_resource = ~B_LIT1B~ END //value = 0
       LPF ALTER_EFFECT INT_VAR match_opcode = 326 parameter1 = 2 parameter2 = %arm_eq% STR_VAR match_resource = ~B_LIT2B~ END //value = 2
<<<<<<< HEAD
//       LPF ALTER_EFFECT INT_VAR match_opcode = 326 parameter1 = 3 parameter2 = %arm_eq% STR_VAR match_resource = ~B_LIT3B~ END //value = 3  NOT NEEDED
=======
       LPF ALTER_EFFECT INT_VAR match_opcode = 326 parameter1 = 3 parameter2 = %arm_eq% STR_VAR match_resource = ~B_LIT3B~ END //value = 3
>>>>>>> 6092bde644dafe18befcb01c9edd932806abb950
       LPF ALTER_EFFECT INT_VAR match_opcode = 326 parameter1 = 4 parameter2 = %arm_eq% STR_VAR match_resource = ~B_LIT4B~ END //value = 4
       LPF ALTER_EFFECT INT_VAR match_opcode = 326 parameter1 = 5 parameter2 = %arm_eq% STR_VAR match_resource = ~B_LIT5B~ END //value = 5
     END                                      //END 'light' armor types
     PATCH_IF  (~itemtype~ = 62) BEGIN        //'medium' armor types
       LPF cd_apply_batch STR_VAR array_name = b_medium_armor_arrays END // medium armor prof batch
       LPF ALTER_EFFECT INT_VAR match_opcode = 326 parameter1 = 2 parameter2 = %arm_ls% STR_VAR match_resource = ~B_MED0B~ END //values less than 2
       LPF ALTER_EFFECT INT_VAR match_opcode = 326 parameter1 = 2 parameter2 = %arm_eq% STR_VAR match_resource = ~B_MED2B~ END //value = 2
       LPF ALTER_EFFECT INT_VAR match_opcode = 326 parameter1 = 3 parameter2 = %arm_eq% STR_VAR match_resource = ~B_MED3B~ END //value = 3
       LPF ALTER_EFFECT INT_VAR match_opcode = 326 parameter1 = 4 parameter2 = %arm_eq% STR_VAR match_resource = ~B_MED4B~ END //value = 4
       LPF ALTER_EFFECT INT_VAR match_opcode = 326 parameter1 = 5 parameter2 = %arm_eq% STR_VAR match_resource = ~B_MED5B~ END //value = 5
     END                                      //END 'medium' armor types
     PATCH_IF  (~itemtype~ = 65) BEGIN        //'heavy' armor types
       LPF cd_apply_batch STR_VAR array_name = b_heavy_armor_arrays END // heavy armor prof batch
       LPF ALTER_EFFECT INT_VAR match_opcode = 326 parameter1 = 2 parameter2 = %arm_ls% STR_VAR match_resource = ~B_HVY0B~ END //values less than 2
       LPF ALTER_EFFECT INT_VAR match_opcode = 326 parameter1 = 2 parameter2 = %arm_eq% STR_VAR match_resource = ~B_HVY2B~ END //value = 2
       LPF ALTER_EFFECT INT_VAR match_opcode = 326 parameter1 = 3 parameter2 = %arm_eq% STR_VAR match_resource = ~B_HVY3B~ END //value = 3
       LPF ALTER_EFFECT INT_VAR match_opcode = 326 parameter1 = 4 parameter2 = %arm_eq% STR_VAR match_resource = ~B_HVY4B~ END //value = 4
       LPF ALTER_EFFECT INT_VAR match_opcode = 326 parameter1 = 5 parameter2 = %arm_eq% STR_VAR match_resource = ~B_HVY5B~ END //value = 5
     END                                      //END 'heavy' armor types
 END
BUT_ONLY
//
/*
//EVERYTHING BELOW THIS LINE IS FOR REFERENCE ONLY
//--------------------------------------------------//

//Experament using Rod 0xD or 13 food items type for priest wands
//Step 1: Give usabilty to classes   (Give it to all classes)
//Step 1.1: Wands.
//Add more wands!!!!  IWDEE wands and IWD2 Wands
//wiz wands (item type 35)

//priest wands (item type 13)
//remove any previous type 13 items (goodberries?) 

//add new priest wands

//change wand WAND11 (wand of heavens) to type 13
//Standardize their prices/tiers (by level, though with exceptions (e.g. cloudkill))
//Special case: Wiz/sor can use wiz/sor but not cle/dru wands; conversly, cle/dru can use dru/cle but not wiz/sor wands


//Step 2: Apply non-usability to all relevant clabs
//2.1: Copy over
//2.1.1: Wand restriction
//Restrict wiz items
COPY ~proficiency/data/proficiency/b_wnd01.SPL~ ~override~   //
COPY ~proficiency/data/proficiency/b_wnd01.SPL~ ~override/b_wnd02.SPL~   //
COPY ~proficiency/data/proficiency/b_wnd01.SPL~ ~override/b_wnd03.SPL~   //
COPY ~proficiency/data/proficiency/b_wnd01.SPL~ ~override/b_wnd04.SPL~   //
//Now, only excludes wand of fear, WAND02.  (BE SURE TO EXCLUDE WAND02 here)!!!!Need to add all others...
//Thank you Ardanis and Gwen for this code!!!
COPY_EXISTING_REGEXP - GLOB ~.*\.itm~ ~override~ // notice the minus sign "-" to prevent actual copying
 PATCH_IF (~%SOURCE_SIZE%~ > ~0x71~) BEGIN
 READ_SHORT 0x1c ~itemtype~
   PATCH_IF (~itemtype~ = 35) BEGIN  //only if a wand
    READ_LONG 0x34 ~tier1~  //tier based on cost of item
       PATCH_IF (~tier1~ < 7501) BEGIN  //
     DEFINE_ASSOCIATIVE_ARRAY wand_list BEGIN "%DEST_RES%" => tier1 END
       END
    READ_LONG 0x34 ~tier2~  //tier based on cost of item
       PATCH_IF (~tier2~ > 7500) BEGIN  //
            PATCH_IF (~tier2~ < 15000) BEGIN  // tier 2 (arbitrary) range 7500-14999 gold
     DEFINE_ASSOCIATIVE_ARRAY wand_list BEGIN "%DEST_RES%" => tier2 END
            END
       END
    READ_LONG 0x34 ~tier3~  //tier based on cost of item
       PATCH_IF (~tier3~ > 14999) BEGIN  //
            PATCH_IF (~tier3~ < 20000) BEGIN  // tier 3 (arbitrary) range 15000-19999 gold
     DEFINE_ASSOCIATIVE_ARRAY wand_list BEGIN "%DEST_RES%" => tier3 END
            END
       END
    READ_LONG 0x34 ~tier4~  //tier based on cost of item
       PATCH_IF (~tier4~ > 19999) BEGIN  // tier 4 (arbitrary) range 20000+ gold
     DEFINE_ASSOCIATIVE_ARRAY wand_list BEGIN "%DEST_RES%" => tier4 END
       END
END
END

//OUTER_SPRINT $wand_list("WAND02") = 0
//OUTER_SPRINT $wand_list("wand02") = 0 // WeiDU is on my hate list (C) Ardanis

//clone
ACTION_PHP_EACH wand_list AS block => rock BEGIN
  ACTION_IF (~%rock%~ STRING_EQUAL ~tier1~) BEGIN
     COPY_EXISTING ~b_wnd01.SPL~ ~override~
       LPF CLONE_EFFECT INT_VAR multi_match = 1 match_opcode = 180 STR_VAR resource = EVAL ~%block%~ END
  END
  ACTION_IF (~%rock%~ STRING_EQUAL ~tier2~) BEGIN
     COPY_EXISTING ~b_wnd02.SPL~ ~override~
       LPF CLONE_EFFECT INT_VAR multi_match = 1 match_opcode = 180 STR_VAR resource = EVAL ~%block%~ END
  END
  ACTION_IF (~%rock%~ STRING_EQUAL ~tier3~) BEGIN
     COPY_EXISTING ~b_wnd03.SPL~ ~override~
       LPF CLONE_EFFECT INT_VAR multi_match = 1 match_opcode = 180 STR_VAR resource = EVAL ~%block%~ END
  END
  ACTION_IF (~%rock%~ STRING_EQUAL ~tier4~) BEGIN
     COPY_EXISTING ~b_wnd04.SPL~ ~override~
       LPF CLONE_EFFECT INT_VAR multi_match = 1 match_opcode = 180 STR_VAR resource = EVAL ~%block%~ END
  END
END


COPY_EXISTING ~b_wnd01.SPL~ ~override~
  LPF DELETE_EFFECT INT_VAR multi_match = 1 match_opcode = 180 STR_VAR match_resource = ~WAND02~ END // remove extra wand of fear
COPY_EXISTING ~b_wnd02.SPL~ ~override~
  LPF DELETE_EFFECT INT_VAR multi_match = 1 match_opcode = 180 STR_VAR match_resource = ~WAND02~ END // remove extra wand of fear
COPY_EXISTING ~b_wnd03.SPL~ ~override~
  LPF DELETE_EFFECT INT_VAR multi_match = 1 match_opcode = 180 STR_VAR match_resource = ~WAND02~ END // remove extra wand of fear
  LPF DELETE_EFFECT INT_VAR multi_match = 1 match_opcode = 180 STR_VAR match_resource = ~WAND11~ END // remove wand of heavens (special case to be restricted cle item)
COPY_EXISTING ~b_wnd04.SPL~ ~override~
  LPF DELETE_EFFECT INT_VAR multi_match = 1 match_opcode = 180 STR_VAR match_resource = ~WAND02~ END // remove extra wand of fear


//Step 3: Add to clabs...
//Have to set up an array
COPY_EXISTING ~kitlist.2da~ ~override~
	COUNT_2DA_ROWS ~9~ "rows"
	FOR ( index = 2 ; index < rows ; index = index + 1 ) BEGIN
		READ_2DA_ENTRY %index% 5 9 modclab
		READ_2DA_ENTRY %index% 8 9 modclass
		DEFINE_ASSOCIATIVE_ARRAY d5_base_spell_array BEGIN "%modclab%" => "%modclass%" END
	END
BUT_ONLY









//Need to enable tier 1 wands for those with a single prof in...
COPY ~mundane/data/proficiency/B_PRF01.SPL~ ~override~   //
APPEND ~splprot.2da~ ~B_PROF01%TAB%89%TAB%-1%TAB%1~    

COPY_EXISTING ~splprot.2da~ ~override~
   COUNT_2DA_COLS cols // amount of columns
   READ_2DA_ENTRIES_NOW rows cols // read all file into memory
   FOR (row = 1; row < rows; ++row) BEGIN // iterate over rows
      READ_2DA_ENTRY_FORMER rows row 0 ~stat~ // read column value
      PATCH_IF ~%stat%~ STRING_EQUAL_CASE ~B_PROF01~ BEGIN
         SET int_eq_row = %row%
      END
   END
BUT_ONLY
COPY_EXISTING ~SPWI102.spl~ ~override~
  LPF ALTER_EFFECT INT_VAR match_opcode = 326 parameter2 = %int_eq_row% END
*/
